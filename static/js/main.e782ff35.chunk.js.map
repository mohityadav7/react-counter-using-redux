{"version":3,"sources":["store/actionTypes.ts","store/actionCreators.ts","components/Counter.tsx","components/Counter2.tsx","components/Counter3.tsx","components/Counter4.tsx","App.tsx","reportWebVitals.ts","store/countReducer.ts","store/store.tsx","index.tsx"],"names":["actionTypes","increment","change","type","payload","decrement","reset","connect","state","count","props","className","onClick","dispatch","incrementCount","decrementCount","Counter3","useDispatch","useSelector","Counter4","useReducer","action","countDispatch","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","countReducer","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e782ff35.chunk.js","sourcesContent":["enum actionTypes {\n  increment = 'INCREMENT',\n  decrement = 'DECREMENT',\n  reset = 'RESET',\n}\n\nexport default actionTypes;\n","import actionTypes from './actionTypes';\n\nexport interface IncrementAction {\n  type: actionTypes.increment;\n  payload: number;\n}\n\nexport interface DecrementAction {\n  type: actionTypes.decrement;\n  payload: number;\n}\n\nexport interface ResetAction {\n  type: actionTypes.reset;\n}\n\nexport function increment(change: number): IncrementAction {\n  return {\n    type: actionTypes.increment,\n    payload: change,\n  };\n}\n\nexport function decrement(change: number): DecrementAction {\n  return {\n    type: actionTypes.decrement,\n    payload: change,\n  };\n}\n\nexport function reset(): ResetAction {\n  return {\n    type: actionTypes.reset,\n  };\n}\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { decrement, increment, reset } from '../store/actionCreators';\nimport { Dispatch, RootState } from '../store/store';\n\ninterface Props {\n  count: number;\n  dispatch: Dispatch;\n}\n\nconst Counter = (props: Props) => {\n  return (\n    <div>\n      <div className='count-container'>{props.count}</div>\n      <div>\n        <button onClick={() => props.dispatch(decrement(1))}>Minus 1</button>\n        <button onClick={() => props.dispatch(increment(1))}>Plus 1</button>\n        <button onClick={() => props.dispatch(reset())}>Reset</button>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    count: state.count,\n  };\n};\n\nexport default connect(mapStateToProps)(Counter);\n","/**\n * This is similar to Counter component but instead of using dispatching actions\n * directly, it uses mapDispatchToProps to map dispatcher functions to props\n */\n\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { increment, decrement, reset } from '../store/actionCreators';\nimport { Action } from '../store/countReducer';\nimport { Dispatch, RootState } from '../store/store';\n\ninterface Props {\n  count: number;\n  incrementCount: (change: number) => Action;\n  decrementCount: (change: number) => Action;\n  reset: () => Action;\n}\n\nconst Counter2: React.FC<Props> = (props: Props): React.ReactElement => {\n  return (\n    <div>\n      <div className='small-counter'>Count from Counter2: {props.count}</div>\n      <button onClick={() => props.decrementCount(2)}>Minus 2</button>\n      <button onClick={() => props.incrementCount(2)}>Plus 2</button>\n      <button onClick={props.reset}>Reset</button>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  count: state.count,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    incrementCount: (change: number) => dispatch(increment(change)),\n    decrementCount: (change: number) => dispatch(decrement(change)),\n    reset: () => dispatch(reset()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter2);\n","/**\n * Implement counter using redux hooks\n */\n\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { decrement, increment, reset } from '../store/actionCreators';\nimport { RootState } from '../store/store';\n\nconst Counter3 = (): React.ReactElement => {\n  const dispatch = useDispatch();\n  const count = useSelector((state: RootState) => state.count);\n\n  return (\n    <div>\n      <div className='small-counter'>Count from Counter3: {count}</div>\n      <button onClick={() => dispatch(decrement(3))}>Minus 3</button>\n      <button onClick={() => dispatch(increment(3))}>Plus 3</button>\n      <button onClick={() => dispatch(reset())}>Reset</button>\n    </div>\n  );\n};\n\nexport default Counter3;\n","/**\n * Counter implementation using useReducer simplified\n */\n\nimport React from 'react';\nimport { useReducer } from 'react';\n\ntype Action = { type: string; payload?: number };\n\nconst Counter4: React.FC = (): React.ReactElement => {\n  const reducer = (count: number, action: Action): number => {\n    switch (action.type) {\n      case 'INCREMENT':\n        return count + (action.payload || 0);\n      case 'DECREMENT':\n        return count - (action.payload || 0);\n      case 'RESET':\n        return 0;\n      default:\n        return 0;\n    }\n  };\n\n  const [count, countDispatch] = useReducer(reducer, 0);\n\n  return (\n    <div>\n      <div className='count-container'>{count}</div>\n      <div>\n        <button\n          onClick={() => countDispatch({ type: 'DECREMENT', payload: 4 })}\n        >\n          Minus 4\n        </button>\n        <button\n          onClick={() => countDispatch({ type: 'INCREMENT', payload: 4 })}\n        >\n          Plus 4\n        </button>\n        <button onClick={() => countDispatch({ type: 'RESET' })}>Reset</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Counter4;\n\n// /**\n//  * Counter implementation using useReducer\n//  */\n\n// import React from 'react';\n// import { useReducer } from 'react';\n\n// type State = number;\n\n// enum actionType {\n//   increment = 'INCREMENT',\n//   decrement = 'DECREMENT',\n//   reset = 'RESET',\n// }\n\n// type Action =\n//   | { type: actionType.increment; payload: number }\n//   | { type: actionType.decrement; payload: number }\n//   | { type: actionType.reset };\n\n// const Counter4: React.FC = (): React.ReactElement => {\n//   const reducer = (count: State, action: Action): State => {\n//     switch (action.type) {\n//       case 'INCREMENT':\n//         return count + action.payload;\n//       case 'DECREMENT':\n//         return count - action.payload;\n//       case 'RESET':\n//         return 0;\n//       default:\n//         return 0;\n//     }\n//   };\n\n//   const [count, countDispatch] = useReducer(reducer, 0);\n\n//   return (\n//     <div>\n//       <div className='count-container'>{count}</div>\n//       <div>\n//         <button\n//           onClick={() =>\n//             countDispatch({ type: actionType.decrement, payload: 4 })\n//           }\n//         >\n//           Minus 4\n//         </button>\n//         <button\n//           onClick={() =>\n//             countDispatch({ type: actionType.increment, payload: 4 })\n//           }\n//         >\n//           Plus 4\n//         </button>\n//         <button onClick={() => countDispatch({ type: actionType.reset })}>\n//           Reset\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Counter4;\n","import React, { ReactElement } from 'react';\nimport Counter from './components/Counter';\nimport Counter2 from './components/Counter2';\nimport Counter3 from './components/Counter3';\nimport Counter4 from './components/Counter4';\n\nconst App: React.FC = (): ReactElement => {\n  return (\n    <div className='counter-container'>\n      <Counter /> {/* using connect & mapStateToProps */}\n      <Counter2 /> {/* using connect, mapStateToProps & mapDispatchToProps */}\n      <Counter3 /> {/* using redux hooks */}\n      <Counter4 /> {/* using useReducer */}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import actionTypes from './actionTypes';\nimport {\n  IncrementAction,\n  DecrementAction,\n  ResetAction,\n} from './actionCreators';\n\ninterface CountState {\n  count: number;\n}\n\nconst initialState = {\n  count: 0,\n};\n\nexport type Action = IncrementAction | DecrementAction | ResetAction;\n\nconst countReducer = (state = initialState, action: Action): CountState => {\n  switch (action.type) {\n    case actionTypes.increment:\n      return { count: state.count + action.payload };\n\n    case actionTypes.decrement:\n      return { count: state.count - action.payload };\n\n    case actionTypes.reset:\n      return { count: 0 };\n\n    default:\n      return state;\n  }\n};\n\nexport default countReducer;\n","import { createStore } from 'redux';\nimport countReducer from './countReducer';\n\nconst store = createStore(countReducer);\n\nexport type Dispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}